/*
 * This file is generated by jOOQ.
 */
package com.fligneul.srm.jooq.tables;


import com.fligneul.srm.jooq.DefaultSchema;
import com.fligneul.srm.jooq.Keys;
import com.fligneul.srm.jooq.tables.records.FiringpostRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Firingpost extends TableImpl<FiringpostRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>FIRINGPOST</code>
     */
    public static final Firingpost FIRINGPOST = new Firingpost();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FiringpostRecord> getRecordType() {
        return FiringpostRecord.class;
    }

    /**
     * The column <code>FIRINGPOST.ID</code>.
     */
    public final TableField<FiringpostRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>FIRINGPOST.FIRINGPOINTID</code>.
     */
    public final TableField<FiringpostRecord, Integer> FIRINGPOINTID = createField(DSL.name("FIRINGPOINTID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>FIRINGPOST.NAME</code>.
     */
    public final TableField<FiringpostRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(50), this, "");

    private Firingpost(Name alias, Table<FiringpostRecord> aliased) {
        this(alias, aliased, null);
    }

    private Firingpost(Name alias, Table<FiringpostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>FIRINGPOST</code> table reference
     */
    public Firingpost(String alias) {
        this(DSL.name(alias), FIRINGPOST);
    }

    /**
     * Create an aliased <code>FIRINGPOST</code> table reference
     */
    public Firingpost(Name alias) {
        this(alias, FIRINGPOST);
    }

    /**
     * Create a <code>FIRINGPOST</code> table reference
     */
    public Firingpost() {
        this(DSL.name("FIRINGPOST"), null);
    }

    public <O extends Record> Firingpost(Table<O> child, ForeignKey<O, FiringpostRecord> key) {
        super(child, key, FIRINGPOST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<FiringpostRecord, Integer> getIdentity() {
        return (Identity<FiringpostRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FiringpostRecord> getPrimaryKey() {
        return Keys.PK_FIRINGPOST;
    }

    @Override
    public List<ForeignKey<FiringpostRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_FIRINGPOST_FIRINGPOINT_ID);
    }

    private transient Firingpoint _firingpoint;

    public Firingpoint firingpoint() {
        if (_firingpoint == null)
            _firingpoint = new Firingpoint(this, Keys.FK_FIRINGPOST_FIRINGPOINT_ID);

        return _firingpoint;
    }

    @Override
    public Firingpost as(String alias) {
        return new Firingpost(DSL.name(alias), this);
    }

    @Override
    public Firingpost as(Name alias) {
        return new Firingpost(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Firingpost rename(String name) {
        return new Firingpost(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Firingpost rename(Name name) {
        return new Firingpost(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
