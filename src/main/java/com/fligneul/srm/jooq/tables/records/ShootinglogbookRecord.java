/*
 * This file is generated by jOOQ.
 */
package com.fligneul.srm.jooq.tables.records;


import com.fligneul.srm.jooq.tables.Shootinglogbook;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShootinglogbookRecord extends UpdatableRecordImpl<ShootinglogbookRecord> implements Record2<Integer, LocalDate> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>SHOOTINGLOGBOOK.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>SHOOTINGLOGBOOK.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>SHOOTINGLOGBOOK.CREATIONDATE</code>.
     */
    public void setCreationdate(LocalDate value) {
        set(1, value);
    }

    /**
     * Getter for <code>SHOOTINGLOGBOOK.CREATIONDATE</code>.
     */
    public LocalDate getCreationdate() {
        return (LocalDate) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, LocalDate> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, LocalDate> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Shootinglogbook.SHOOTINGLOGBOOK.ID;
    }

    @Override
    public Field<LocalDate> field2() {
        return Shootinglogbook.SHOOTINGLOGBOOK.CREATIONDATE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public LocalDate component2() {
        return getCreationdate();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public LocalDate value2() {
        return getCreationdate();
    }

    @Override
    public ShootinglogbookRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ShootinglogbookRecord value2(LocalDate value) {
        setCreationdate(value);
        return this;
    }

    @Override
    public ShootinglogbookRecord values(Integer value1, LocalDate value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ShootinglogbookRecord
     */
    public ShootinglogbookRecord() {
        super(Shootinglogbook.SHOOTINGLOGBOOK);
    }

    /**
     * Create a detached, initialised ShootinglogbookRecord
     */
    public ShootinglogbookRecord(Integer id, LocalDate creationdate) {
        super(Shootinglogbook.SHOOTINGLOGBOOK);

        setId(id);
        setCreationdate(creationdate);
    }
}
