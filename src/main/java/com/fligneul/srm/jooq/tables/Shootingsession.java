/*
 * This file is generated by jOOQ.
 */
package com.fligneul.srm.jooq.tables;


import com.fligneul.srm.jooq.DefaultSchema;
import com.fligneul.srm.jooq.Keys;
import com.fligneul.srm.jooq.tables.records.ShootingsessionRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Shootingsession extends TableImpl<ShootingsessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>SHOOTINGSESSION</code>
     */
    public static final Shootingsession SHOOTINGSESSION = new Shootingsession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShootingsessionRecord> getRecordType() {
        return ShootingsessionRecord.class;
    }

    /**
     * The column <code>SHOOTINGSESSION.ID</code>.
     */
    public final TableField<ShootingsessionRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>SHOOTINGSESSION.SESSIONDATE</code>.
     */
    public final TableField<ShootingsessionRecord, LocalDate> SESSIONDATE = createField(DSL.name("SESSIONDATE"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>SHOOTINGSESSION.INSTRUCTORNAME</code>.
     */
    public final TableField<ShootingsessionRecord, String> INSTRUCTORNAME = createField(DSL.name("INSTRUCTORNAME"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>SHOOTINGSESSION.SHOOTINGLOGBOOKID</code>.
     */
    public final TableField<ShootingsessionRecord, Integer> SHOOTINGLOGBOOKID = createField(DSL.name("SHOOTINGLOGBOOKID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>SHOOTINGSESSION.WEAPONID</code>.
     */
    public final TableField<ShootingsessionRecord, Integer> WEAPONID = createField(DSL.name("WEAPONID"), SQLDataType.INTEGER, this, "");

    private Shootingsession(Name alias, Table<ShootingsessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Shootingsession(Name alias, Table<ShootingsessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>SHOOTINGSESSION</code> table reference
     */
    public Shootingsession(String alias) {
        this(DSL.name(alias), SHOOTINGSESSION);
    }

    /**
     * Create an aliased <code>SHOOTINGSESSION</code> table reference
     */
    public Shootingsession(Name alias) {
        this(alias, SHOOTINGSESSION);
    }

    /**
     * Create a <code>SHOOTINGSESSION</code> table reference
     */
    public Shootingsession() {
        this(DSL.name("SHOOTINGSESSION"), null);
    }

    public <O extends Record> Shootingsession(Table<O> child, ForeignKey<O, ShootingsessionRecord> key) {
        super(child, key, SHOOTINGSESSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ShootingsessionRecord, Integer> getIdentity() {
        return (Identity<ShootingsessionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ShootingsessionRecord> getPrimaryKey() {
        return Keys.PK_SHOOTINGSESSION;
    }

    @Override
    public List<ForeignKey<ShootingsessionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_SHOOTINGSESSION_SHOOTINGLOGBOOK_ID, Keys.FK_SHOOTINGSESSION_WEAPON_ID);
    }

    private transient Shootinglogbook _shootinglogbook;
    private transient Weapon _weapon;

    public Shootinglogbook shootinglogbook() {
        if (_shootinglogbook == null)
            _shootinglogbook = new Shootinglogbook(this, Keys.FK_SHOOTINGSESSION_SHOOTINGLOGBOOK_ID);

        return _shootinglogbook;
    }

    public Weapon weapon() {
        if (_weapon == null)
            _weapon = new Weapon(this, Keys.FK_SHOOTINGSESSION_WEAPON_ID);

        return _weapon;
    }

    @Override
    public Shootingsession as(String alias) {
        return new Shootingsession(DSL.name(alias), this);
    }

    @Override
    public Shootingsession as(Name alias) {
        return new Shootingsession(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Shootingsession rename(String name) {
        return new Shootingsession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shootingsession rename(Name name) {
        return new Shootingsession(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, LocalDate, String, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
