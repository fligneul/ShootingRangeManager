/*
 * This file is generated by jOOQ.
 */
package com.fligneul.srm.jooq.tables;


import com.fligneul.srm.jooq.DefaultSchema;
import com.fligneul.srm.jooq.Keys;
import com.fligneul.srm.jooq.tables.records.WeaponRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Weapon extends TableImpl<WeaponRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>WEAPON</code>
     */
    public static final Weapon WEAPON = new Weapon();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WeaponRecord> getRecordType() {
        return WeaponRecord.class;
    }

    /**
     * The column <code>WEAPON.ID</code>.
     */
    public final TableField<WeaponRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>WEAPON.NAME</code>.
     */
    public final TableField<WeaponRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>WEAPON.IDENTIFICATIONNUMBER</code>.
     */
    public final TableField<WeaponRecord, Integer> IDENTIFICATIONNUMBER = createField(DSL.name("IDENTIFICATIONNUMBER"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>WEAPON.CALIBER</code>.
     */
    public final TableField<WeaponRecord, String> CALIBER = createField(DSL.name("CALIBER"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>WEAPON.BUYDATE</code>.
     */
    public final TableField<WeaponRecord, LocalDate> BUYDATE = createField(DSL.name("BUYDATE"), SQLDataType.LOCALDATE, this, "");

    private Weapon(Name alias, Table<WeaponRecord> aliased) {
        this(alias, aliased, null);
    }

    private Weapon(Name alias, Table<WeaponRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>WEAPON</code> table reference
     */
    public Weapon(String alias) {
        this(DSL.name(alias), WEAPON);
    }

    /**
     * Create an aliased <code>WEAPON</code> table reference
     */
    public Weapon(Name alias) {
        this(alias, WEAPON);
    }

    /**
     * Create a <code>WEAPON</code> table reference
     */
    public Weapon() {
        this(DSL.name("WEAPON"), null);
    }

    public <O extends Record> Weapon(Table<O> child, ForeignKey<O, WeaponRecord> key) {
        super(child, key, WEAPON);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<WeaponRecord, Integer> getIdentity() {
        return (Identity<WeaponRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<WeaponRecord> getPrimaryKey() {
        return Keys.PK_WEAPON;
    }

    @Override
    public Weapon as(String alias) {
        return new Weapon(DSL.name(alias), this);
    }

    @Override
    public Weapon as(Name alias) {
        return new Weapon(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Weapon rename(String name) {
        return new Weapon(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Weapon rename(Name name) {
        return new Weapon(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, String, LocalDate> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
