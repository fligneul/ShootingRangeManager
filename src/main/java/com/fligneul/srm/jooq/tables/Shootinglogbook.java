/*
 * This file is generated by jOOQ.
 */
package com.fligneul.srm.jooq.tables;


import com.fligneul.srm.jooq.DefaultSchema;
import com.fligneul.srm.jooq.Keys;
import com.fligneul.srm.jooq.tables.records.ShootinglogbookRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Shootinglogbook extends TableImpl<ShootinglogbookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>SHOOTINGLOGBOOK</code>
     */
    public static final Shootinglogbook SHOOTINGLOGBOOK = new Shootinglogbook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShootinglogbookRecord> getRecordType() {
        return ShootinglogbookRecord.class;
    }

    /**
     * The column <code>SHOOTINGLOGBOOK.ID</code>.
     */
    public final TableField<ShootinglogbookRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>SHOOTINGLOGBOOK.CREATIONDATE</code>.
     */
    public final TableField<ShootinglogbookRecord, LocalDate> CREATIONDATE = createField(DSL.name("CREATIONDATE"), SQLDataType.LOCALDATE, this, "");

    private Shootinglogbook(Name alias, Table<ShootinglogbookRecord> aliased) {
        this(alias, aliased, null);
    }

    private Shootinglogbook(Name alias, Table<ShootinglogbookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>SHOOTINGLOGBOOK</code> table reference
     */
    public Shootinglogbook(String alias) {
        this(DSL.name(alias), SHOOTINGLOGBOOK);
    }

    /**
     * Create an aliased <code>SHOOTINGLOGBOOK</code> table reference
     */
    public Shootinglogbook(Name alias) {
        this(alias, SHOOTINGLOGBOOK);
    }

    /**
     * Create a <code>SHOOTINGLOGBOOK</code> table reference
     */
    public Shootinglogbook() {
        this(DSL.name("SHOOTINGLOGBOOK"), null);
    }

    public <O extends Record> Shootinglogbook(Table<O> child, ForeignKey<O, ShootinglogbookRecord> key) {
        super(child, key, SHOOTINGLOGBOOK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ShootinglogbookRecord, Integer> getIdentity() {
        return (Identity<ShootinglogbookRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ShootinglogbookRecord> getPrimaryKey() {
        return Keys.PK_SHOOTINGLOGBOOK;
    }

    @Override
    public Shootinglogbook as(String alias) {
        return new Shootinglogbook(DSL.name(alias), this);
    }

    @Override
    public Shootinglogbook as(Name alias) {
        return new Shootinglogbook(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Shootinglogbook rename(String name) {
        return new Shootinglogbook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shootinglogbook rename(Name name) {
        return new Shootinglogbook(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, LocalDate> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
