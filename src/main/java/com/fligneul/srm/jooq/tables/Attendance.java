/*
 * This file is generated by jOOQ.
 */
package com.fligneul.srm.jooq.tables;


import com.fligneul.srm.jooq.DefaultSchema;
import com.fligneul.srm.jooq.Keys;
import com.fligneul.srm.jooq.tables.records.AttendanceRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Attendance extends TableImpl<AttendanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ATTENDANCE</code>
     */
    public static final Attendance ATTENDANCE = new Attendance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttendanceRecord> getRecordType() {
        return AttendanceRecord.class;
    }

    /**
     * The column <code>ATTENDANCE.ID</code>.
     */
    public final TableField<AttendanceRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ATTENDANCE.LICENSEEID</code>.
     */
    public final TableField<AttendanceRecord, Integer> LICENSEEID = createField(DSL.name("LICENSEEID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ATTENDANCE.STARTDATE</code>.
     */
    public final TableField<AttendanceRecord, LocalDateTime> STARTDATE = createField(DSL.name("STARTDATE"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>ATTENDANCE.STOPDATE</code>.
     */
    public final TableField<AttendanceRecord, LocalDateTime> STOPDATE = createField(DSL.name("STOPDATE"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>ATTENDANCE.FIRINGPOINTID</code>.
     */
    public final TableField<AttendanceRecord, Integer> FIRINGPOINTID = createField(DSL.name("FIRINGPOINTID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ATTENDANCE.FIRINGPOSTID</code>.
     */
    public final TableField<AttendanceRecord, Integer> FIRINGPOSTID = createField(DSL.name("FIRINGPOSTID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ATTENDANCE.WEAPONID</code>.
     */
    public final TableField<AttendanceRecord, Integer> WEAPONID = createField(DSL.name("WEAPONID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ATTENDANCE.STATUSID</code>.
     */
    public final TableField<AttendanceRecord, Integer> STATUSID = createField(DSL.name("STATUSID"), SQLDataType.INTEGER, this, "");

    private Attendance(Name alias, Table<AttendanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Attendance(Name alias, Table<AttendanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ATTENDANCE</code> table reference
     */
    public Attendance(String alias) {
        this(DSL.name(alias), ATTENDANCE);
    }

    /**
     * Create an aliased <code>ATTENDANCE</code> table reference
     */
    public Attendance(Name alias) {
        this(alias, ATTENDANCE);
    }

    /**
     * Create a <code>ATTENDANCE</code> table reference
     */
    public Attendance() {
        this(DSL.name("ATTENDANCE"), null);
    }

    public <O extends Record> Attendance(Table<O> child, ForeignKey<O, AttendanceRecord> key) {
        super(child, key, ATTENDANCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<AttendanceRecord, Integer> getIdentity() {
        return (Identity<AttendanceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AttendanceRecord> getPrimaryKey() {
        return Keys.PK_ATTENDANCE;
    }

    @Override
    public List<ForeignKey<AttendanceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ATTENDANCE_LICENSEE_ID, Keys.FK_ATTENDANCE_FIRINGPOINT_ID, Keys.FK_ATTENDANCE_FIRINGPOST_ID, Keys.FK_ATTENDANCE_WEAPON_ID, Keys.FK_ATTENDANCE_STATUS_ID);
    }

    private transient Licensee _licensee;
    private transient Firingpoint _firingpoint;
    private transient Firingpost _firingpost;
    private transient Weapon _weapon;
    private transient Status _status;

    public Licensee licensee() {
        if (_licensee == null)
            _licensee = new Licensee(this, Keys.FK_ATTENDANCE_LICENSEE_ID);

        return _licensee;
    }

    public Firingpoint firingpoint() {
        if (_firingpoint == null)
            _firingpoint = new Firingpoint(this, Keys.FK_ATTENDANCE_FIRINGPOINT_ID);

        return _firingpoint;
    }

    public Firingpost firingpost() {
        if (_firingpost == null)
            _firingpost = new Firingpost(this, Keys.FK_ATTENDANCE_FIRINGPOST_ID);

        return _firingpost;
    }

    public Weapon weapon() {
        if (_weapon == null)
            _weapon = new Weapon(this, Keys.FK_ATTENDANCE_WEAPON_ID);

        return _weapon;
    }

    public Status status() {
        if (_status == null)
            _status = new Status(this, Keys.FK_ATTENDANCE_STATUS_ID);

        return _status;
    }

    @Override
    public Attendance as(String alias) {
        return new Attendance(DSL.name(alias), this);
    }

    @Override
    public Attendance as(Name alias) {
        return new Attendance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Attendance rename(String name) {
        return new Attendance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attendance rename(Name name) {
        return new Attendance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, LocalDateTime, LocalDateTime, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
